<%
  set_meta_tags(
    title: "Good to Know - Rails UI Components",
    description: "Architectural decisions, best practices, and important considerations for Rails UI components.",
    keywords: "Rails, UI, Components, Architecture, Best Practices, ViewComponent"
  )
%>
<% breadcrumb :ui_good_to_know %>

<article>
  <header class="header">
    <div class="header__heading">
      <h1 class="header__title">Good to Know</h1>
      <p class="header__subtitle">
        Architectural decisions, best practices, and important considerations for working with this component library.
      </p>
    </div>
  </header>

  <section class="flex flex-col gap-4 mb-12">
    <h2 class="h2">Architectural Philosophy</h2>

    <%= render Ui::Alert::Component.new title: "Copy, Don't Install", type: :info do %>
      <p>
        This is a <strong>template library</strong>, not a gem. Copy components to your project and customize them as needed. This approach gives you full control over styling, behavior, and dependencies.
      </p>
      <p>
        ðŸ’¡ Think of it as a "component starter kit" rather than a traditional library.
      </p>
    <% end %>
  </section>

  <section class="flex flex-col gap-4 my-12">
    <h2 class="h2">Component Design Patterns</h2>

    <h3 class="h3">1. Consistent API</h3>
    <p>All components follow similar initialization patterns:</p>
    <pre><code>def initialize(variant: nil, size: :md, **options)
  @variant = variant   # Visual style (primary, secondary, etc.)
  @size = size         # Size modifier (xs, sm, md, lg, xl)
  @options = options   # Additional attributes (class, data, etc.)
end</code></pre>

    <h3 class="mt-4 h3">2. CSS Class Strategy</h3>
    <p>Components use a hybrid approach:</p>
    <div class="flex flex-col gap-2 p-6 bg-gray-100 rounded-lg">
      <div class="flex flex-col gap-1">
        <h4 class="h4">Base Classes</h4>
        <p>Core component styling using TailwindCSS utilities</p>
        <pre><code>@apply px-4 py-2 rounded-md font-medium transition-colors</code></pre>
      </div>
      <div class="flex flex-col gap-1">
        <h4 class="mt-4 h4">Modifier Classes</h4>
        <p>BEM-like naming for variants and states</p>
        <pre><code>.btn-primary, .btn-lg, .btn-outlined</code></pre>
      </div>
      <div class="flex flex-col gap-1">
        <h4 class="mt-4 h4">Dynamic Classes</h4>
        <p>Rails' <code>class_names</code> helper for conditional styling</p>
        <pre><code>class_names("btn", "btn-#{variant}", "btn-loading": loading)</code></pre>
      </div>
    </div>

    <h3 class="mt-4 h3">3. Content Slots</h3>
    <p class="mb-3 text-gray-600">Complex components use ViewComponent slots for flexibility:</p>

    <pre><code># Component definition
renders_one :header, Ui::Card::Header::Component
renders_one :body
renders_one :footer, Ui::Card::Footer::Component

# Usage
&lt;%= render Ui::Card::Component.new do |card| %&gt;
  &lt;% card.with_header(title: "Title") %&gt;
  &lt;% card.with_body { "Content" } %&gt;
&lt;% end %&gt;</code></pre>
  </section>

  <section class="flex flex-col gap-4 my-12">
    <h3 class="h3">Styling Guidelines</h3>

    <%= render Ui::Alert::Component.new title: "TailwindCSS Best Practices", type: :info do %>
      <ul class="pl-8 space-y-2 list-disc">
        <li>Use <code>@apply</code> for component base styles</li>
        <li>Avoid long utility chains in templates</li>
        <li>Create custom CSS for complex animations/interactions</li>
        <li>Use CSS custom properties for themeable values</li>
      </ul>
    <% end %>

    <h3 class="mt-4 h3">Responsive Design</h3>
    <p>
      Components are mobile-first and responsive by default. Use Tailwind's responsive prefixes judiciously.
    </p>
    <pre><code>@apply px-4 md:px-6 lg:px-8</code></pre>

    <h3 class="mt-4 h3">ðŸ’¡ View Components or HTML/CSS</h3>
    <p>
      It's not necessary to use view components at all in the view layer. You can have standard HTML with `classes` and `data` attributes.
    </p>
    <p>
      For example. Instead of:
    </p>
    <pre><code>&lt;%= render Ui::Button::Component.new(variant: :primary, size: :lg).with_content "Button" %/&gt;</code></pre>

    <p>
      You can do:
    </p>
    <pre><code>&lt;button class="btn btn-primary btn-lg"&gt;Button&lt;/button&gt;</code></pre>
  </section>

  <section class="flex flex-col gap-4 my-12">
    <h2 class="h2">Accessibility (A11y)</h2>
    <div class="flex flex-col gap-6">
      <%= render Ui::Alert::Component.new title: "Built-in Features" do %>
        <ul class="pl-8 space-y-2 list-disc">
          <li>Semantic HTML elements</li>
          <li>ARIA attributes where needed</li>
          <li>Keyboard navigation support</li>
          <li>Focus management for modals/dropdowns</li>
          <li>Screen reader friendly content</li>
        </ul>
      <% end %>

      <%= render Ui::Alert::Component.new title: "Your Responsibilities" do %>
        <ul class="pl-8 space-y-2 list-disc">
          <li>Provide meaningful alt text for images</li>
          <li>Ensure sufficient color contrast</li>
          <li>Test with screen readers</li>
          <li>Add ARIA labels for dynamic content</li>
          <li>Follow WCAG 2.1 guidelines</li>
        </ul>
      <% end %>
    </div>
  </section>

  <section class="flex flex-col gap-4 my-12">
    <h3 class="h2">Contributing & Customization</h3>
    <h4 class="h3">Making It Your Own</h4>
    <p>
      These components are meant to be a starting point. Feel free to:
    </p>
    <ul class="ul">
      <li>Modify styling to match your brand</li>
      <li>Add new variants and sizes</li>
      <li>Extend functionality as needed</li>
      <li>Remove unused components</li>
      <li>Combine multiple components into new ones</li>
    </ul>

    <%= render Ui::Alert::Component.new title: "Remember", type: :info do %>
      <p>
        This is your codebase once you copy the components. Make them work for your specific needs!
      </p>
    <% end %>
  </section>
</article>
